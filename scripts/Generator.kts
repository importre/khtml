enum class Group { NONE, HTML, HEAD, BODY }

class Config(val name: String,
             val groups: Set<Group>,
             val attributes: Set<String> = hashSetOf())

class Generator() {

    fun run(name: String) {
        val none = arrayListOf<Config>()
        val html = arrayListOf<Config>()
        val head = arrayListOf<Config>()
        val body = arrayListOf<Config>()

        for (config in Configs) {
            config.groups.forEach {
                when (it) {
                    Group.NONE -> none.add(config)
                    Group.HTML -> html.add(config)
                    Group.HEAD -> head.add(config)
                    Group.BODY -> body.add(config)
                }
            }
        }

        val buff = arrayOf(
                """
                // Generated by Generator.kts
                // DO NOT MODIFY
                """.trimIndent(),
                "package io.github.importre.khtml",
                genComplexClasses("html", html),
                genComplexClasses("head", head),
                genComplexClasses("body", body),
                genSimpleClasses(),
                genGlobalFunctions(),
                genAttributes()
        ).joinToString("\n\n")

        java.io.PrintWriter(java.io.FileOutputStream(name)).use {
            it.println(buff.replace("\n{3,}".toRegex(), "\n\n"))
        }
    }

    private fun genAttributes(): String {
        return Configs.map {
            val upper = it.name.toUpperCase()
            it.attributes.map {
                """
                var $upper.$it: String
                    get() = attributes["$it"] ?: ""
                    set(value) {
                        attributes["$it"] = value
                    }
                """.trimIndent()
            }.joinToString("\n\n")
        }.joinToString("\n\n")
    }

    private fun genComplexClasses(name: String, tags: List<Config>): String {
        val reserved = arrayOf("object", "var")
        val innerFuns = tags
                .mapIndexed { i, it ->
                    val upper = it.name.toUpperCase()
                    val funName = if (it.name in reserved) "`${it.name}`" else it.name
                    "    fun $funName(init: $upper.() -> Unit) = initTag($upper(), init)"
                }
                .joinToString("\n")

        val decl = if (name == "html") "class" else "abstract class"
        val end = if (name == "html") "" else "Tag"
        val className = if (end.isEmpty()) {
            name.toUpperCase()
        } else {
            name[0].toUpperCase() + name.substring(1)
        }
        val param = if (name == "html") "" else "name: String"
        val parentParam = if (name == "html") "\"html\"" else "name"
        return "$decl $className$end($param) : TextTag($parentParam) {\n$innerFuns\n}"
    }

    private fun genSimpleClasses(): String {
        return Configs
                .filter { it.name != "html" }
                .map {
                    val parent = if (Group.HEAD in it.groups) {
                        "HeadTag"
                    } else if (Group.BODY in it.groups) {
                        "BodyTag"
                    } else {
                        when {
                            it.name == "head" -> "HeadTag"
                            it.name == "body" -> "BodyTag"
                            else -> "Tag"
                        }
                    }
                    """class ${it.name.toUpperCase()}() : $parent("${it.name}")"""
                }.joinToString("\n")
    }

    private fun genGlobalFunctions(): String {
        val filter = hashSetOf<String>()
        val reserved = arrayOf("object", "var")

        return Configs.map {
            if (it.name !in filter) {
                filter.add(it.name)
                val upper = it.name.toUpperCase()
                val funName = if (it.name in reserved) "`${it.name}`" else it.name
                """
                fun $funName(init: $upper.() -> Unit): $upper {
                    val e = $upper()
                    e.init()
                    return e
                }
                """.trimIndent()
            } else {
                ""
            }
        }.joinToString("\n\n")
    }

    companion object {
        val funSet = hashSetOf<String>()
        val classSet = hashSetOf<String>()

        // https://goo.gl/GEBXsc
        val Configs = listOf(
                Config("base", setOf(Group.HEAD)),
                Config("link", setOf(Group.HEAD)),
                Config("meta", setOf(Group.HEAD)),
                Config("noscript", setOf(Group.HEAD)),
                Config("script", setOf(Group.HEAD, Group.BODY)),
                Config("style", setOf(Group.HEAD)),
                Config("title", setOf(Group.HEAD)),

                Config("a", setOf(Group.BODY), hashSetOf("href")),
                Config("abbr", setOf(Group.BODY)),
                Config("address", setOf(Group.BODY)),
                Config("area", setOf(Group.BODY)),
                Config("article", setOf(Group.BODY)),
                Config("aside", setOf(Group.BODY)),
                Config("audio", setOf(Group.BODY)),
                Config("b", setOf(Group.BODY)),
                Config("bdi", setOf(Group.BODY)),
                Config("bdo", setOf(Group.BODY)),
                Config("big", setOf(Group.BODY)),
                Config("blockquote", setOf(Group.BODY)),
                Config("body", setOf(Group.HTML)),
                Config("br", setOf(Group.BODY)),
                Config("button", setOf(Group.BODY)),
                Config("canvas", setOf(Group.BODY)),
                Config("caption", setOf(Group.BODY)),
                Config("cite", setOf(Group.BODY)),
                Config("code", setOf(Group.BODY)),
                Config("col", setOf(Group.BODY)),
                Config("colgroup", setOf(Group.BODY)),
                Config("data", setOf(Group.BODY)),
                Config("datalist", setOf(Group.BODY)),
                Config("dd", setOf(Group.BODY)),
                Config("del", setOf(Group.BODY)),
                Config("details", setOf(Group.BODY)),
                Config("dfn", setOf(Group.BODY)),
                Config("dialog", setOf(Group.BODY)),
                Config("div", setOf(Group.BODY)),
                Config("dl", setOf(Group.BODY)),
                Config("dt", setOf(Group.BODY)),
                Config("em", setOf(Group.BODY)),
                Config("embed", setOf(Group.BODY)),
                Config("fieldset", setOf(Group.BODY)),
                Config("figcaption", setOf(Group.BODY)),
                Config("figure", setOf(Group.BODY)),
                Config("footer", setOf(Group.BODY)),
                Config("form", setOf(Group.BODY)),
                Config("h1", setOf(Group.BODY)),
                Config("h2", setOf(Group.BODY)),
                Config("h3", setOf(Group.BODY)),
                Config("h4", setOf(Group.BODY)),
                Config("h5", setOf(Group.BODY)),
                Config("h6", setOf(Group.BODY)),
                Config("head", setOf(Group.HTML)),
                Config("header", setOf(Group.BODY)),
                Config("hgroup", setOf(Group.BODY)),
                Config("hr", setOf(Group.BODY)),
                Config("html", setOf(Group.NONE)),
                Config("i", setOf(Group.BODY)),
                Config("iframe", setOf(Group.BODY)),
                Config("img", setOf(Group.BODY), hashSetOf("src")),
                Config("input", setOf(Group.BODY)),
                Config("ins", setOf(Group.BODY)),
                Config("kbd", setOf(Group.BODY)),
                Config("keygen", setOf(Group.BODY)),
                Config("label", setOf(Group.BODY)),
                Config("legend", setOf(Group.BODY)),
                Config("li", setOf(Group.BODY)),
                Config("main", setOf(Group.BODY)),
                Config("map", setOf(Group.BODY)),
                Config("mark", setOf(Group.BODY)),
                Config("menu", setOf(Group.BODY)),
                Config("menuitem", setOf(Group.BODY)),
                Config("meter", setOf(Group.BODY)),
                Config("nav", setOf(Group.BODY)),
                Config("object", setOf(Group.BODY)),
                Config("ol", setOf(Group.BODY)),
                Config("optgroup", setOf(Group.BODY)),
                Config("option", setOf(Group.BODY)),
                Config("output", setOf(Group.BODY)),
                Config("p", setOf(Group.BODY)),
                Config("param", setOf(Group.BODY)),
                Config("picture", setOf(Group.BODY)),
                Config("pre", setOf(Group.BODY)),
                Config("progress", setOf(Group.BODY)),
                Config("q", setOf(Group.BODY)),
                Config("rp", setOf(Group.BODY)),
                Config("rt", setOf(Group.BODY)),
                Config("ruby", setOf(Group.BODY)),
                Config("s", setOf(Group.BODY)),
                Config("samp", setOf(Group.BODY)),
                Config("section", setOf(Group.BODY)),
                Config("select", setOf(Group.BODY)),
                Config("small", setOf(Group.BODY)),
                Config("source", setOf(Group.BODY)),
                Config("span", setOf(Group.BODY)),
                Config("strong", setOf(Group.BODY)),
                Config("sub", setOf(Group.BODY)),
                Config("summary", setOf(Group.BODY)),
                Config("sup", setOf(Group.BODY)),
                Config("table", setOf(Group.BODY)),
                Config("tbody", setOf(Group.BODY)),
                Config("td", setOf(Group.BODY)),
                Config("textarea", setOf(Group.BODY)),
                Config("tfoot", setOf(Group.BODY)),
                Config("th", setOf(Group.BODY)),
                Config("thead", setOf(Group.BODY)),
                Config("time", setOf(Group.BODY)),
                Config("tr", setOf(Group.BODY)),
                Config("track", setOf(Group.BODY)),
                Config("u", setOf(Group.BODY)),
                Config("ul", setOf(Group.BODY)),
                Config("var", setOf(Group.BODY)),
                Config("video", setOf(Group.BODY)),
                Config("wbr", setOf(Group.BODY)),

                // SVG
                Config("circle", setOf(Group.BODY)),
                Config("clipPath", setOf(Group.BODY)),
                Config("defs", setOf(Group.BODY)),
                Config("ellipse", setOf(Group.BODY)),
                Config("g", setOf(Group.BODY)),
                Config("image", setOf(Group.BODY)),
                Config("line", setOf(Group.BODY)),
                Config("linearGradient", setOf(Group.BODY)),
                Config("mask", setOf(Group.BODY)),
                Config("path", setOf(Group.BODY)),
                Config("pattern", setOf(Group.BODY)),
                Config("polygon", setOf(Group.BODY)),
                Config("polyline", setOf(Group.BODY)),
                Config("radialGradient", setOf(Group.BODY)),
                Config("rect", setOf(Group.BODY)),
                Config("stop", setOf(Group.BODY)),
                Config("svg", setOf(Group.BODY)),
                Config("text", setOf(Group.BODY)),
                Config("tspan", setOf(Group.BODY))
        )
    }
}

val name = "./src/main/kotlin/io/github/importre/khtml/TagsImpl.kt"
Generator().run(name)
